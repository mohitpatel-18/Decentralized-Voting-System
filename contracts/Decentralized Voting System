// SPDX-License-Identifier: MIT
pragma solidity ^0.8.19;

/**
 * @title Decentralized Voting System
 * @dev A smart contract for conducting transparent and secure voting
 * @author Decentralized Voting Team
 */
contract DecentralizedVotingSystem {
    
    // Struct to represent a candidate
    struct Candidate {
        uint256 id;
        string name;
        uint256 voteCount;
        bool exists;
    }
    
    // Struct to represent a voter
    struct Voter {
        bool isRegistered;
        bool hasVoted;
        uint256 votedCandidateId;
    }
    
    // State variables
    address public admin;
    string public electionName;
    bool public votingActive;
    uint256 public totalVotes;
    uint256 public candidateCount;
    
    // Mappings
    mapping(uint256 => Candidate) public candidates;
    mapping(address => Voter) public voters;
    
    // Events
    event VoterRegistered(address indexed voter);
    event VoteCast(address indexed voter, uint256 indexed candidateId);
    event CandidateAdded(uint256 indexed candidateId, string name);
    event VotingStarted();
    event VotingEnded();
    
    // Modifiers
    modifier onlyAdmin() {
        require(msg.sender == admin, "Only admin can perform this action");
        _;
    }
    
    modifier votingIsActive() {
        require(votingActive, "Voting is not currently active");
        _;
    }
    
    modifier votingIsInactive() {
        require(!votingActive, "Voting is currently active");
        _;
    }
    
    /**
     * @dev Constructor to initialize the voting system
     * @param _electionName Name of the election
     */
    constructor(string memory _electionName) {
        admin = msg.sender;
        electionName = _electionName;
        votingActive = false;
        totalVotes = 0;
        candidateCount = 0;
    }
    
    /**
     * @dev Core Function 1: Register voters for the election
     * @param _voterAddress Address of the voter to register
     */
    function registerVoter(address _voterAddress) external onlyAdmin votingIsInactive {
        require(_voterAddress != address(0), "Invalid voter address");
        require(!voters[_voterAddress].isRegistered, "Voter already registered");
        
        voters[_voterAddress] = Voter({
            isRegistered: true,
            hasVoted: false,
            votedCandidateId: 0
        });
        
        emit VoterRegistered(_voterAddress);
    }
    
    /**
     * @dev Core Function 2: Cast vote for a candidate
     * @param _candidateId ID of the candidate to vote for
     */
    function castVote(uint256 _candidateId) external votingIsActive {
        require(voters[msg.sender].isRegistered, "Voter not registered");
        require(!voters[msg.sender].hasVoted, "Voter has already voted");
        require(candidates[_candidateId].exists, "Candidate does not exist");
        
        // Update voter information
        voters[msg.sender].hasVoted = true;
        voters[msg.sender].votedCandidateId = _candidateId;
        
        // Update candidate vote count
        candidates[_candidateId].voteCount++;
        
        // Update total votes
        totalVotes++;
        
        emit VoteCast(msg.sender, _candidateId);
    }
    
    /**
     * @dev Core Function 3: Get election results and winner
     * @return winnerName Name of the winning candidate
     * @return winnerVotes Number of votes received by winner
     * @return totalVotesCast Total number of votes cast
     */
    function getResults() external view returns (
        string memory winnerName,
        uint256 winnerVotes,
        uint256 totalVotesCast
    ) {
        require(candidateCount > 0, "No candidates available");
        
        uint256 winningVoteCount = 0;
        uint256 winnerId = 0;
        
        // Find candidate with most votes
        for (uint256 i = 1; i <= candidateCount; i++) {
            if (candidates[i].voteCount > winningVoteCount) {
                winningVoteCount = candidates[i].voteCount;
                winnerId = i;
            }
        }
        
        return (
            candidates[winnerId].name,
            winningVoteCount,
            totalVotes
        );
    }
    
    /**
     * @dev Add a candidate to the election (Admin only)
     * @param _name Name of the candidate
     */
    function addCandidate(string memory _name) external onlyAdmin votingIsInactive {
        require(bytes(_name).length > 0, "Candidate name cannot be empty");
        
        candidateCount++;
        candidates[candidateCount] = Candidate({
            id: candidateCount,
            name: _name,
            voteCount: 0,
            exists: true
        });
        
        emit CandidateAdded(candidateCount, _name);
    }
    
    /**
     * @dev Start the voting process (Admin only)
     */
    function startVoting() external onlyAdmin votingIsInactive {
        require(candidateCount > 0, "No candidates available");
        votingActive = true;
        emit VotingStarted();
    }
    
    /**
     * @dev End the voting process (Admin only)
     */
    function endVoting() external onlyAdmin votingIsActive {
        votingActive = false;
        emit VotingEnded();
    }
    
    /**
     * @dev Get candidate information
     * @param _candidateId ID of the candidate
     * @return id Candidate ID
     * @return name Candidate name
     * @return voteCount Number of votes received
     */
    function getCandidate(uint256 _candidateId) external view returns (
        uint256 id,
        string memory name,
        uint256 voteCount
    ) {
        require(candidates[_candidateId].exists, "Candidate does not exist");
        Candidate memory candidate = candidates[_candidateId];
        return (candidate.id, candidate.name, candidate.voteCount);
    }
    
    /**
     * @dev Get voter information
     * @param _voterAddress Address of the voter
     * @return isRegistered Whether voter is registered
     * @return hasVoted Whether voter has cast their vote
     */
    function getVoter(address _voterAddress) external view returns (
        bool isRegistered,
        bool hasVoted
    ) {
        Voter memory voter = voters[_voterAddress];
        return (voter.isRegistered, voter.hasVoted);
    }
    
    /**
     * @dev Get current election status
     * @return name Election name
     * @return active Whether voting is currently active
     * @return totalCandidates Total number of candidates
     * @return totalVotesCast Total votes cast so far
     */
    function getElectionStatus() external view returns (
        string memory name,
        bool active,
        uint256 totalCandidates,
        uint256 totalVotesCast
    ) {
        return (electionName, votingActive, candidateCount, totalVotes);
    }
}
